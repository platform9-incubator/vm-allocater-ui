import React, { useState, useEffect } from 'react';
import Welcome from './components/Welcome';
import DataCenterSelection from './components/DataCenterSelection';
import RegionSelection from './components/RegionSelection';
import FlavorSelection from './components/FlavorSelection';
import QuantityBid from './components/QuantityBid';
import KeyPair from './components/KeyPair';
import SecurityGroup from './components/SecurityGroup';
import Volume from './components/Volume';
import ReviewSubmit from './components/ReviewSubmit';
import BidConfirmation from './components/BidConfirmation';
import Dashboard from './components/Dashboard';
import './App.css';
import { Routes, Route } from 'react-router-dom';
function App() {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    dataCenter: '',
    region: '',
    flavor: '',
    quantity: 1,
    bidPrice: 0,
    keyPairOption: 'none',
    keyPairName: '',
    publicKey: '',
    securityGroups: [],
    securityGroupRules: [],
    volumes: [],
    servers: []
  });
  const [bidWon, setBidWon] = useState(true);
  const [loading, setLoading] = useState(false);
  const [dashboardData, setDashboardData] = useState(null);
  const [showDashboard, setShowDashboard] = useState(false); // Add this new state

  const nextStep = () => setStep(step + 1);
  const prevStep = () => setStep(step - 1);

  const updateFormData = (field, value) => {
    setFormData({
      ...formData,
      [field]: value
    });
  };

  const handleSubmit = async () => {
    console.log("Inside hadle submit of APP.jsx ")
    setLoading(true);
    // Simulate API call and bid processing
    setTimeout(() => {
      setBidWon(true);
      setLoading(false);
      nextStep(); // Move to confirmation step
    }, 5000);
  };

  const proceedToDashboard = async () => {
    // Simulate fetching dashboard data
    const mockData = {
      vms: formData.servers.map(server => ({
        ...server,
        id: `vm-${Math.random().toString(36).substr(2, 9)}`,
        status: 'active',
        bidPrice: formData.bidPrice,
        created_at: new Date().toISOString()
      })),
      volumes: formData.volumes,
      keyPairs: formData.keyPairOption !== 'none' ? [{
        name: formData.keyPairName,
        public_key: formData.publicKey || 'Generated by system'
      }] : [],
      securityGroups: formData.securityGroups,
      securityGroupRules: formData.securityGroupRules
    };
    
    setDashboardData(mockData);
    // nextStep(); // Move to dashboard
    setShowDashboard(true); // Use this instead of nextStep()
    await new Promise(resolve => setTimeout(resolve, 1000))
  };

  if (showDashboard) {
    return <Dashboard data={dashboardData} onBack={() => setShowDashboard(false)} />;
  } 


  const renderStep = () => {
    switch (step) {
      case 1: return <Welcome nextStep={nextStep} />;
      case 2: return <DataCenterSelection formData={formData} updateFormData={updateFormData} nextStep={nextStep} prevStep={prevStep} />;
      case 3: return <RegionSelection formData={formData} updateFormData={updateFormData} nextStep={nextStep} prevStep={prevStep} />;
      case 4: return <FlavorSelection formData={formData} updateFormData={updateFormData} nextStep={nextStep} prevStep={prevStep} />;
      case 5: return <QuantityBid formData={formData} updateFormData={updateFormData} nextStep={nextStep} prevStep={prevStep} />;
      case 6: return <KeyPair formData={formData} updateFormData={updateFormData} nextStep={nextStep} prevStep={prevStep} />;
      case 7: return <SecurityGroup formData={formData} updateFormData={updateFormData} nextStep={nextStep} prevStep={prevStep} />;
      case 8: return <Volume formData={formData} updateFormData={updateFormData} nextStep={nextStep} prevStep={prevStep} />;
      case 9: return <ReviewSubmit formData={formData} prevStep={prevStep} nextStep={nextStep} onSubmit={handleSubmit} />;
      case 10: return <BidConfirmation bidWon={bidWon} loading={loading} onProceed={proceedToDashboard} />;
      case 11: return <Dashboard data={dashboardData} />;
      default: return <Welcome nextStep={nextStep} />;
    }
  };

  return (<>

    <div className="app-container">
      {step <= 9 && (
        <div className="progress-bar">
          <div className={`progress-step ${step >= 1 ? 'active' : ''}`}>Welcome</div>
          <div className={`progress-step ${step >= 2 ? 'active' : ''}`}>Data Center</div>
          <div className={`progress-step ${step >= 3 ? 'active' : ''}`}>Region</div>
          <div className={`progress-step ${step >= 4 ? 'active' : ''}`}>Flavor</div>
          <div className={`progress-step ${step >= 5 ? 'active' : ''}`}>Quantity & Bid</div>
          <div className={`progress-step ${step >= 6 ? 'active' : ''}`}>Key Pair</div>
          <div className={`progress-step ${step >= 7 ? 'active' : ''}`}>Security</div>
          <div className={`progress-step ${step >= 8 ? 'active' : ''}`}>Volume</div>
          <div className={`progress-step ${step >= 9 ? 'active' : ''}`}>Review</div>
        </div>
      )}
      {renderStep()}
    </div>
    </>
  );
}

export default App;